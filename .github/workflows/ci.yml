name: Build, Scan & Deploy (Multi-Env)

on:
  push:
    branches:
      - 'feature/*' 
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev
      - staging
      - main

env:
  IMAGE_NAME: simple-static-web
#  IMAGE_TAG: 1.0.${{ github.run_number }}
  REGISTRY: 10.10.10.116:8083
  ARGOCD_SERVER: "192.168.0.43:8443"
  ARGOCD_USER: ${{ secrets.ARGOCD_USER }}
  ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }}

jobs:
  build:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: self-hosted
    if: startsWith(github.ref_name, 'feature/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Nexus Docker Registry
        run: |
          echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.NEXUS_USERNAME }}" --password-stdin

      - name: Set Image Tag Dynamically
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          SHORT_SHA=$(echo "${GITHUB_SHA::7}")
          echo "IMAGE_TAG=${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV
      
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./simple-static-web

      - name: Push Docker Image to Nexus
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#      - name: Set Image Tag Dynamically
#        id: vars
#        run: |
#          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
#          SHORT_SHA=$(echo "${GITHUB_SHA::7}")
#          echo "IMAGE_TAG=${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV
#          echo "Image tag will be: ${BRANCH}-${SHORT_SHA}"

#      - name: Build & Push with Cache
#        uses: docker/build-push-action@v4
#        with:
#          context: ./simple-static-web
#          push: true
#          tags: |
#            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
#          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
#          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max

  scan:
    name: üîç Scan Docker Image
    runs-on: self-hosted
    needs: build
    if: startsWith(github.ref_name, 'feature/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Scan with Trivy (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: table
          vuln-type: os,library
          severity: CRITICAL,HIGH
          exit-code: 1

  deploy:
    name: üöÄ Deploy via ArgoCD (Dynamic Env)
    runs-on: self-hosted
    if: |
      github.ref_name == 'dev' || 
      github.ref_name == 'staging' || 
      github.ref_name == 'main'

    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v4
        with:
          repository: gokulbanik/rancher
          token: ${{ secrets.RANCHER_REPO_TOKEN }}
          path: rancher

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER --username $ARGOCD_USER --password $ARGOCD_PASS --plaintext --grpc-web --insecure

      - name: Sync ArgoCD App
        run: |
          if [ "${GITHUB_REF_NAME}" == "dev" ]; then
            NAMESPACE="dev-web"
            APP_NAME="dev-web"
          elif [ "${GITHUB_REF_NAME}" == "staging" ]; then
            NAMESPACE="stg-web"
            APP_NAME="stg-web"
          elif [ "${GITHUB_REF_NAME}" == "main" ]; then
            NAMESPACE="prd-web"
            APP_NAME="prd-web"
          fi

          cd rancher/charts/${GITHUB_REF_NAME}
          argocd app sync $APP_NAME --grpc-web --insecure


  notify:
    name: üí¨ Notify Result
    runs-on: self-hosted
    needs: [build, scan, deploy]
    if: always()
    steps:
      - name: Notification skipped (no Slack configured)
        run: echo "Slack notification skipped; no SLACK_WEBHOOK_URL provided."

#    steps:
#      - name: Slack Notification
#        if: always()
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          payload: |
#            {
#              "text": ":rocket: *${{ github.ref_name }}* deployment completed!\n
#              Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`\n
#              Argo App: `${{ env.ARGO_APP }}`\n
#              Namespace: `${{ env.NAMESPACE }}`\n
#              Status: ${{ job.status }}"
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
