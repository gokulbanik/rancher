name: Build, Scan & Deploy (Multi-Env)

on:
  push:
    branches:
      - 'feature/*'   # feature branches
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev
      - staging
      - main

env:
  IMAGE_NAME: simple-static-web
  REGISTRY: 10.10.10.116:8083
  ARGOCD_SERVER: "192.168.0.43:8443"
  ARGOCD_USER: ${{ secrets.ARGOCD_USER }}
  ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }}

jobs:
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: self-hosted
    if: startsWith(github.ref_name, 'feature/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Nexus Docker Registry
        run: |
          echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.NEXUS_USERNAME }}" --password-stdin

      - name: Set Image Tag Dynamically
        id: vars
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          SHORT_SHA=$(echo "${GITHUB_SHA::7}")
          echo "IMAGE_TAG=${BRANCH}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "Image tag will be: ${BRANCH}-${SHORT_SHA}"

      - name: Build & Push with Cache
        uses: docker/build-push-action@v4
        with:
          context: ./simple-static-web
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max

  scan:
    name: 🔍 Scan Docker Image
    runs-on: self-hosted
    needs: build
    if: startsWith(github.ref_name, 'feature/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Scan with Trivy (fail on CRITICAL)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: table
          vuln-type: os,library
          severity: CRITICAL,HIGH
          exit-code: 1

  deploy:
    name: 🚀 Deploy via ArgoCD (Dynamic Env)
    runs-on: self-hosted
    needs: scan
    if: |
      github.ref_name == 'dev' || 
      github.ref_name == 'staging' || 
      github.ref_name == 'main'

    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v4
        with:
          repository: gokulbanik/rancher
          token: ${{ secrets.RANCHER_REPO_TOKEN }}
          path: rancher

      - name: Define Environment Variables
        id: envmap
        run: |
          case "${GITHUB_REF_NAME}" in
            dev)
              echo "ENV_DIR=dev" >> $GITHUB_ENV
              echo "ARGO_APP=dev-web" >> $GITHUB_ENV
              echo "NAMESPACE=dev" >> $GITHUB_ENV
              ;;
            staging)
              echo "ENV_DIR=staging" >> $GITHUB_ENV
              echo "ARGO_APP=stg-web" >> $GITHUB_ENV
              echo "NAMESPACE=staging" >> $GITHUB_ENV
              ;;
            main)
              echo "ENV_DIR=prd" >> $GITHUB_ENV
              echo "ARGO_APP=prd-web" >> $GITHUB_ENV
              echo "NAMESPACE=prod" >> $GITHUB_ENV
              ;;
          esac

      - name: Update Helm values.yaml with new image tag
        run: |
          cd rancher/charts/${ENV_DIR}
          echo "Updating image tag for ${ENV_DIR} environment..."
          yq -i '.image.tag = env(IMAGE_TAG)' values.yaml
          yq -i '.namespace = env(NAMESPACE)' values.yaml || echo "namespace field not found, skipping"

      - name: Commit and push manifest changes
        run: |
          cd rancher
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .
          if git diff-index --quiet HEAD --; then
            echo "✅ No changes to commit"
          else
            git commit -m "Update ${ENV_DIR} image to ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
            git push origin main
          fi

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER \
            --username $ARGOCD_USER \
            --password $ARGOCD_PASS \
            --plaintext --grpc-web --insecure 

      - name: Sync ArgoCD App
        run: |
          echo "Syncing ArgoCD app: ${ARGO_APP} in namespace ${NAMESPACE}"
          argocd app sync ${ARGO_APP} --grpc-web --insecure
          argocd app wait ${ARGO_APP} --health --timeout 120

  notify:
    name: 💬 Notify Result
    runs-on: self-hosted
    needs: [build, scan, deploy]
    if: always()
    steps:
      - name: Notification skipped (no Slack configured)
        run: echo "Slack notification skipped; no SLACK_WEBHOOK_URL provided."

#    steps:
#      - name: Slack Notification
#        if: always()
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          payload: |
#            {
#              "text": ":rocket: *${{ github.ref_name }}* deployment completed!\n
#              Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`\n
#              Argo App: `${{ env.ARGO_APP }}`\n
#              Namespace: `${{ env.NAMESPACE }}`\n
#              Status: ${{ job.status }}"
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
